(()=>{const e=()=>{const e=document.getElementById("redirect-config");if(!e)return void console.error("[Redirect] Configuration element #redirect-config not found");const r={url:e.getAttribute("data-url"),querystring:e.getAttribute("data-querystring"),modifier:e.getAttribute("data-modifier"),siteUrl:e.getAttribute("data-site-url"),environment:e.getAttribute("data-environment")};if(console.log("[Redirect] Configuration:",r),!r.siteUrl)return void console.error("[Redirect] Site URL is required but not provided");const t=new URL(window.location.href),o=new URL(r.siteUrl);let n=e=>e;if(r.modifier&&'""'!==r.modifier&&""!==r.modifier)try{n=new Function("url",`return (${r.modifier})(url)`)}catch(e){console.warn("[Redirect] Failed to parse modifier function:",e),console.warn("[Redirect] Modifier string:",r.modifier)}const i="development"===r.environment,c=i?3e3:1;let l;try{if(r.url)if(/^https?:\/\//i.test(r.url))l=new URL(r.url);else{const e=r.url.startsWith("/")?r.url:`/${r.url}`;l=new URL(`${o.origin}${e}`)}else l=new URL(o)}catch(e){console.error("[Redirect] Invalid redirect URL:",r.url,e),l=new URL(o)}const s="false"!==r.querystring&&!1!==r.querystring;if(s&&t.search){for(const[e,r]of t.searchParams.entries())l.searchParams.set(e,r);console.log(`[Redirect] Forwarded ${t.searchParams.size} query parameters`)}let d;try{const e=n(l);d=e instanceof URL?e.toString():e}catch(e){console.error("[Redirect] Modifier function threw an error:",e),d=l.toString()}console.group("[Redirect] Configuration"),console.log("Original URL:",r.url),console.log("Querystring forwarding:",s),console.log("Modifier:",r.modifier),console.log("Environment:",r.environment),console.log("Delay:",`${c}ms`),console.log("Final URL:",d),console.groupEnd(),i&&console.log(`[Redirect] Delaying redirect by ${c}ms for development mode`),setTimeout(()=>{window.location.href=d},c)};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",e):e()})();